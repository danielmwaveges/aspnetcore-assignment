@using QueueManagementSystem.MVC.Models
@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

@namespace QueueManagementSystem.MVC.Components

@inject IDbContextFactory<QueueManagementSystemContext> DbFactory
@inject ToastService ToastService

<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
<Button Color="ButtonColor.Primary" @onclick="()=>OnShowCreateForm()">Create new service</Button>

<Modal @ref="createModal" >
    <BodyTemplate>
        <EditForm Model="@newService" OnValidSubmit="OnValidCreateFormSubmit" FormName="CreateService">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Name: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="newService.Name" />
                <ValidationMessage For="@(() => newService.Name)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description: <span class="text-danger">*</span></label>
                <InputTextArea class="form-control" @bind-Value="newService.Description"/>
                <ValidationMessage For="@(() => newService.Description)" />
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="OnHideCreateForm">Cancel</Button>
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2" >Save changes</Button>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        
    </FooterTemplate>
</Modal>

<Modal @ref="editModal" Title="Edit Service">
    <BodyTemplate>
        <EditForm Model="@service" OnValidSubmit="OnValidEditFormSubmit" FormName="EditService">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Id: </label>
                <NumberInput TValue="int" Value="service.Id" ValueExpression="() => service.Id" Disabled/>
                <ValidationMessage For="@(() => service.Id)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Name: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="service.Name" />
                <ValidationMessage For="@(() => service.Name)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description: <span class="text-danger">*</span></label>
                <InputTextArea class="form-control" @bind-Value="service.Description"/>
                <ValidationMessage For="@(() => service.Description)" />
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="OnHideEditForm">Cancel</Button>
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2" >Save changes</Button>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="deleteDialog" />

@if (services == null)
{
    <h4>Services Loading...</h4>
}
else
{
    <div class="row">
        @foreach (var service in services)
        {
            <div class="col-sm-6" style="overflow: auto;">
                <Card Color="CardColor.Light" Class="mb-4">
                    <CardBody>
                        <CardTitle>@service.Name</CardTitle>
                        <CardText>@service.Description</CardText>
                        <Button Color="ButtonColor.Primary" @onclick="()=>OnShowEditForm(service)">Edit</Button>
                        <Button Color="ButtonColor.Danger" @onclick="()=>OnDeleteAsync(service)">Delete</Button>
                    </CardBody>
                </Card>
            </div>
        }
        
    </div>  
}


@code{
    private List<Service>? services;
    private Modal editModal;
    private Modal createModal;
    private ConfirmDialog deleteDialog = default!;
    private Service? service;
    private Service? newService = new Service();
    List<ToastMessage> messages = new List<ToastMessage>();

    private async Task OnShowCreateForm()
    {
        await createModal?.ShowAsync();
    }

    private async Task OnHideCreateForm()
    {
        await createModal?.HideAsync();
        newService = new Service();
    }

    private async Task OnValidCreateFormSubmit()
    {
        await createModal?.HideAsync();

        try
        {
            using var context = DbFactory.CreateDbContext();
            Console.WriteLine(newService.Id);
            context.Services.Add(newService);
            context.SaveChanges();
            services = await context.Services.OrderBy(s => s.Id).ToListAsync();
            ToastService.Notify(new ToastMessage{
                Type = ToastType.Success, 
                Title = $"SUCCESS", 
                HelpText = $"{DateTime.Now}", 
                Message = $"Service details added successfully."
                });
        }
        catch(Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }

        newService = new Service();
    }

    private async Task OnValidEditFormSubmit()
    {   
        //TODO: research double click behavior for submit button
        
        await editModal?.HideAsync();

        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Services.Update(service);
            context.SaveChanges();
            services = await context.Services.OrderBy(s => s.Id).ToListAsync();
            ToastService.Notify(new ToastMessage{
                Type = ToastType.Success, 
                Title = $"SUCCESS", 
                HelpText = $"{DateTime.Now}", 
                Message = $"Service detail edited successfully."
                });
        }
        catch(Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
      
    }

    private async Task OnShowEditForm(Service editedService)
    {  
        string jsonString = JsonSerializer.Serialize(editedService);

        service = JsonSerializer.Deserialize<Service>(jsonString);
        await editModal?.ShowAsync();
    }

    private async Task OnDeleteAsync(Service service)
    {
        var confirmation = await deleteDialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.");
    
        if (confirmation)
        {
            try
            {
                using var context = DbFactory.CreateDbContext();
                context.Services.Remove(service);
                context.SaveChanges();
                services = await context.Services.OrderBy(s => s.Id).ToListAsync();
                ToastService.Notify(new(ToastType.Success, $"Service deleted successfully."));
            }
            catch (Exception ex)
            {
                ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
            }
            
        }
        else
        {
             ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Delete action canceled."));
        }
    }

    private async Task OnHideEditForm()
    {   
        await editModal?.HideAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        services = await context.Services.OrderBy(s => s.Id).ToListAsync();
        

    }

}