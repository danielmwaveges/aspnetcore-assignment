@using QueueManagementSystem.MVC.Models
@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using System.Text.Json

@namespace QueueManagementSystem.MVC.Components

@inject IDbContextFactory<QueueManagementSystemContext> DbFactory
@inject ToastService ToastService

<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />
<Button Color="ButtonColor.Primary" @onclick="()=>OnShowCreateForm()">Create new service provider</Button>

<Modal @ref="createModal" >
    <BodyTemplate>
        <EditForm Model="@newServiceProvider" OnValidSubmit="OnValidCreateFormSubmit" FormName="CreateServiceProvider">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Full Names: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="newServiceProvider.FullNames" />
                <ValidationMessage For="@(() => newServiceProvider.FullNames)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="newServiceProvider.Email" />
                <ValidationMessage For="@(() => newServiceProvider.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="newServiceProvider.Password" />
                <ValidationMessage For="@(() => newServiceProvider.Password)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Service Point: <span class="text-danger">*</span></label>
                <InputSelect class="form-select" @bind-Value="newServiceProvider.ServicePointId">
                    @foreach (var servicePoint in servicePoints)
                    {
                        <option value="@servicePoint.Id">@servicePoint.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newServiceProvider.ServicePointId)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Is Admin: <span class="text-danger">*</span></label>
                <Switch @bind-Value="newServiceProvider.IsAdmin" Label="Default switch checkbox input" />
                
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="OnHideCreateForm">Cancel</Button>
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2" >Save changes</Button>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        
    </FooterTemplate>
</Modal>

<Modal @ref="editModal" >
    <BodyTemplate>
        <EditForm Model="@serviceProvider" OnValidSubmit="OnValidEditFormSubmit" FormName="EditServiceProvider">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">FullNames: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="serviceProvider.FullNames" />
                <ValidationMessage For="@(() => serviceProvider.FullNames)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="serviceProvider.Email" />
                <ValidationMessage For="@(() => serviceProvider.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password: <span class="text-danger">*</span></label>
                <InputText class="form-control" @bind-Value="serviceProvider.Password" />
                <ValidationMessage For="@(() => serviceProvider.Password)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Service Point: <span class="text-danger">*</span></label>
                <InputSelect class="form-select" @bind-Value="serviceProvider.ServicePointId">
                    <option value="@serviceProvider.ServicePointId">@serviceProvider.ServicePoint.Name</option>
                    @foreach (var servicePoint in servicePoints.Where(sp => sp.Id != serviceProvider.ServicePointId))
                    {
                        <option value="@servicePoint.Id">@servicePoint.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => serviceProvider.ServicePointId)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Is Admin: <span class="text-danger">*</span></label>
                <Switch @bind-Value="serviceProvider.IsAdmin" Label="Default switch checkbox input" />
                
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="OnHideEditForm">Cancel</Button>
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2" >Save changes</Button>
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="deleteDialog" />

@if (serviceProviders == null)
{
    <h4>Service Providers Loading...</h4>
}

else
{
    <Grid @ref="grid" TItem="ServiceProvider" class="table table-hover table-bordered table-striped" Data="serviceProviders">
        <GridColumn TItem="ServiceProvider" HeaderText="Id">
            @context.Id
        </GridColumn>
        <GridColumn TItem="ServiceProvider" HeaderText="Full Names">
            @context.FullNames
        </GridColumn>
        <GridColumn TItem="ServiceProvider" HeaderText="Email Address">
            @context.Email
        </GridColumn>
        <GridColumn TItem="ServiceProvider" HeaderText="Service Point Name">
            @context.ServicePoint.Name
        </GridColumn>
        <GridColumn TItem="ServiceProvider" HeaderText="Is Administrator">
            @context.IsAdmin
        </GridColumn>
        <GridColumn TItem="ServiceProvider">
            <Button Color="ButtonColor.Primary" @onclick="()=>OnShowEditForm(context)">Edit</Button>
            <Button Color="ButtonColor.Danger" @onclick="()=>OnDeleteAsync(context)">Delete</Button>
        </GridColumn>
    </Grid>
}

@code
{
    private List<ServiceProvider>? serviceProviders;
    private List<ServicePoint>? servicePoints;
    private List<ToastMessage> messages = new List<ToastMessage>();
    private Grid<ServiceProvider> grid;
    private Modal createModal;
    private Modal editModal;
    private ConfirmDialog deleteDialog = default!;
    private ServiceProvider? serviceProvider;
    private ServiceProvider? newServiceProvider = new ServiceProvider();

    private async Task OnShowCreateForm()
    {
        await createModal?.ShowAsync();
    }

    private async Task OnHideCreateForm()
    {
        await createModal?.HideAsync();
        newServiceProvider = new ServiceProvider();
    }

    private async Task OnValidCreateFormSubmit()
    {
        await createModal?.HideAsync();

        try
        {
            using var context = DbFactory.CreateDbContext();
            newServiceProvider.Password = BCrypt.Net.BCrypt.HashPassword(newServiceProvider.Password);
            context.Add(newServiceProvider);
            context.SaveChanges();
            serviceProviders = await context.ServiceProviders.Include(sp => sp.ServicePoint).OrderBy(sp => sp.Id).ToListAsync();
            await grid.RefreshDataAsync();
            ToastService.Notify(new ToastMessage{
                Type = ToastType.Success, 
                Title = $"SUCCESS", 
                HelpText = $"{DateTime.Now}", 
                Message = $"Service Provider created successfully."
                }); 
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }

        newServiceProvider = new ServiceProvider();
    }

    private async Task OnValidEditFormSubmit()
    {   
        await editModal?.HideAsync();

        try
        {
            using var context = DbFactory.CreateDbContext();
            serviceProvider.Password = BCrypt.Net.BCrypt.HashPassword(serviceProvider.Password);
            context.ServiceProviders.Update(serviceProvider);
            context.SaveChanges();
            serviceProviders = await context.ServiceProviders.Include(sp => sp.ServicePoint).OrderBy(sp => sp.Id).ToListAsync();
            await grid.RefreshDataAsync();
            ToastService.Notify(new ToastMessage{
                Type = ToastType.Success, 
                Title = $"SUCCESS", 
                HelpText = $"{DateTime.Now}", 
                Message = $"Service Point details edited successfully."
                });
         
        }
        catch(Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
        
    }

    private async Task OnShowEditForm(ServiceProvider editedServiceProvider)
    {  
        string jsonString = JsonSerializer.Serialize(editedServiceProvider);

        serviceProvider = JsonSerializer.Deserialize<ServiceProvider>(jsonString);
        serviceProvider.Password = null;
        await editModal?.ShowAsync();
    }

    private async Task OnHideEditForm()
    {   
        await editModal?.HideAsync();
    }

    private async Task OnDeleteAsync(ServiceProvider serviceProvider)
    {
        var confirmation = await deleteDialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.");
    
        if (confirmation)
        {
            try
            {
                using var context = DbFactory.CreateDbContext();
                context.ServiceProviders.Remove(serviceProvider);
                context.SaveChanges();
                serviceProviders = await context.ServiceProviders.Include(sp => sp.ServicePoint).OrderBy(sp => sp.Id).ToListAsync();
                await grid.RefreshDataAsync();
                ToastService.Notify(new(ToastType.Success, $"Service Provider deleted successfully."));
            }
            catch (Exception ex)
            {
                ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
            }
            
        }
        else
        {
             ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Delete action canceled."));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        serviceProviders = await context.ServiceProviders.Include(sp => sp.ServicePoint).OrderBy(sp => sp.Id).ToListAsync();
        servicePoints = await context.ServicePoints.OrderBy(sp => sp.Id).ToListAsync();
    }
}
