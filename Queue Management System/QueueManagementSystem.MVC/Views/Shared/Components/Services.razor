@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using QueueManagementSystem.MVC.Models
@using QueueManagementSystem.MVC.Services

@namespace QueueManagementSystem.MVC.Components

@*  In server-side Blazor apps, scoped service registrations can be problematic 
    because the instance is shared across components within the user's circuit.
    DbContext isn't thread safe and isn't designed for concurrent use.
    If there's any chance that multiple threads may access the same code block, 
    inject a factory and make a new instance per operation. *@
@inject IDbContextFactory<QueueManagementSystemContext> DbFactory
@inject ITicketService TicketService
@inject IReportService ReportService
@inject NavigationManager NavigationManager

@if (offeredServices == null)
{
    <h4>Services Loading...</h4>
}
else
{
    <div class="row">
        @foreach (var service in offeredServices)
        {
            <div class="col-sm-6" style="overflow: auto;">
                <Card Color="CardColor.Light" TextAlignment="Alignment.Center" Class="mb-4">
                    <CardBody>
                        <CardTitle>@service.Name</CardTitle>
                        <CardText>@service.Description</CardText>
                        <div class="d-grid gap-2">
                            <Button Color="ButtonColor.Primary" Size="Size.ExtraLarge" Outline="true" @onclick="(() => HandleServiceSelection(service.Name))"> SELECT </Button>
                        </div>

                    </CardBody>
                </Card>
            </div>
        }
        
    </div>  
}


@code {
    private List<Service> offeredServices;

    private void HandleServiceSelection(string serviceName)
    {
        //add ticket to queue
        Ticket ticket = TicketService.GenerateTicket(serviceName);

        //print ticket
        ReportService.GenerateTicketReport(ticket);

        //redirect to waiting page
        NavigationManager.NavigateTo("/Queue/WaitingPage", true);

    }
    
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        offeredServices = await context.Services.ToListAsync();
    }
}