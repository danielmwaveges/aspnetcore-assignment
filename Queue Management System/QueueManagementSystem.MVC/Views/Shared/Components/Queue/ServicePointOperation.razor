@using System
@using Microsoft.AspNetCore.Components
@using QueueManagementSystem.MVC.Models
@using QueueManagementSystem.MVC.Services
@using Microsoft.EntityFrameworkCore
@using QueueManagementSystem.MVC.Data
@using System.Security.Claims

@namespace QueueManagementSystem.MVC.Components

@inject ITicketService TicketService
@inject IDbContextFactory<QueueManagementSystemContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<h5 class="display-6 text-center">You are now in @servicePointName offering @($"{serviceName}s")</h5>
<div class="display-6 text-center mt-5">
    @if (state == ServiceState.Idle)
    {
        if (alertMessage != null)
        {
            <Alert Color="AlertColor.Warning" Dismissable="true">@alertMessage</Alert>
        }
        <p>Waiting to get next ticket....</p>
        <button class="btn btn-primary" @onclick="(() => GetNextTicket(serviceName, servicePointName))">Get Next Ticket</button>
        <button class="btn btn-primary" @onclick="(() => RecallNoShowTicket(serviceName, servicePointName))">Recall No Show Ticket</button>

    } 

    else if (state == ServiceState.Waiting)
    {
        <p>Waiting for Ticket Number: @calledTicket.TicketNumber</p>
        <button class="btn btn-primary" @onclick="MarkAsShowedUp">Mark as Showed Up</button>
        <button class="btn btn-primary" @onclick="MarkAsNoShow">Mark as No Show</button>
    }

    else if (state == ServiceState.Serving)
    {
        <p>Serving Ticket NUmber: @calledTicket.TicketNumber</p>
        <button class="btn btn-primary" @onclick="MarkAsFinished">Mark as Finished</button>
    }

    else if (state == ServiceState.Finished)
    {
        <p>Finished Serving Ticket Number: @calledTicket.TicketNumber</p>
        if (OfferedServices == null)
        {
            <h4>Services Loading...</h4>
        }
        else
        {
            <span>Select a service to transfer:</span>
            <select class="form-control" @bind="transferService">
                <option value="">Dont Transfer</option>
                @foreach (var service in OfferedServices.Where(s => s.Name != serviceName))
                {
                    <option value="@service.Name">@service.Name</option>
                }
            </select>
        }
        
        <button class="btn btn-primary" @onclick="Transfer">Complete Service</button>
    }
</div>


@code{
    enum ServiceState
    {
        Idle,
        Waiting,
        Serving,
        Finished,
    }

    private string? serviceName;
    private string? servicePointName;
    private ServiceState state = ServiceState.Idle;
    private Ticket calledTicket = null;
    private DateTime showUpTime;
    private DateTime finishTime;
    private List<Service> OfferedServices;
    private string transferService = "";
    private string? alertMessage = null;

    private void GetNextTicket(string serviceName, string calledServicePointName)
    {
        //get ticket from ticket queue where service == ?
        calledTicket = TicketService.GetTicketFromQueue(serviceName, calledServicePointName);
        if (calledTicket != null)
        {
            state = ServiceState.Waiting;
        }
        else
        {
            //no pending ticket in queue
            Console.WriteLine($"NO pending ticket with service name {serviceName}");
            alertMessage = $"No pending ticket for {serviceName}";
        }
    }

    private void RecallNoShowTicket(string serviceName, string calledServicePoint)
    {
        calledTicket = TicketService.GetNoShowTicket(serviceName, calledServicePoint);

        if (calledTicket != null)
        {
            state = ServiceState.Waiting;
        }
        else
        {
            //no pending ticket in queue
            Console.WriteLine($"NO pending ticket with service name {serviceName}");
            alertMessage = $"No pending no-show ticket for {serviceName}";
        }
    }
    private void MarkAsShowedUp()
    {
        showUpTime = DateTime.Now;
        state = ServiceState.Serving;
        TicketService.UpdateTicketStatus(calledTicket.Id, "In-Service"); //TODO:unhardcode status

    }

    private void MarkAsNoShow()
    {
        state = ServiceState.Idle;
        TicketService.UpdateTicketStatus(calledTicket.Id, "No-Show");
    }

    private void MarkAsFinished()
    {
        finishTime = DateTime.Now;

        var servedTicket = new ServedTicket {
            TicketNumber = calledTicket.TicketNumber,
            ServiceName = calledTicket.ServiceName,
            PrintTime = calledTicket.PrintTime,
            ShowTime = showUpTime,
            FinishTime = finishTime
        };

        TicketService.RemoveTicketFromQueue(calledTicket);
        
        TicketService.SaveServedTicket(servedTicket);
        
        state = ServiceState.Finished;
    }

    private void Transfer()
    {
        //add ticket to queue with different service
        if (transferService!="")
        {
            TicketService.TransferTicket(calledTicket.TicketNumber, transferService);
        }
        //print ticket

        state = ServiceState.Idle;
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        OfferedServices = await context.Services.ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var serviceProviderId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        var serviceProvider = await context.ServiceProviders.Include(sp => sp.ServicePoint.Service).SingleOrDefaultAsync(sp => sp.Id.ToString() == serviceProviderId);
        servicePointName = serviceProvider.ServicePoint.Name;
        serviceName = serviceProvider.ServicePoint.Service.Name;
    }

}