@using QueueManagementSystem.MVC.Services
@using System.Speech.Synthesis
@namespace QueueManagementSystem.MVC.Components

@inject ITicketService TicketService
@inject IJSRuntime JS


<h2 class="display-4 text-center">Called Tickets</h2>

@if (calledTicketsList.Count == 0)
{
    <h1>No called tickets</h1>
}
else
{
    <div class="column">
        @foreach (var ticket in calledTicketsList)
        {
            <div class="col-sm-6">
                <Card Color="CardColor.Danger" Class="mb-4">
                    <CardBody>
                        <CardTitle class="display-4">@ticket.Item1</CardTitle>
                        <CardText class="h3">Proceed to @ticket.Item2</CardText>
                    </CardBody>
                </Card>
            </div>
        }
    </div>
}


<script>
    textToSpeech = (text) => {
        // Create a SpeechSynthesisUtterance
        const utterance = new SpeechSynthesisUtterance(text);
        
        // Select a voice
        const voices = speechSynthesis.getVoices();
        utterance.voice = voices[0]; // Choose a specific voice

        // Speak the text
        speechSynthesis.speak(utterance);
    };
</script>


@code {
    private List<(string, string)> calledTicketsList = new List<(string, string)>();

    private async void TicketCalledFromQueue(object sender, (string, string) e)
    {
        await InvokeAsync(() =>
        {   
            calledTicketsList.Add(e);

            JS.InvokeVoidAsync("textToSpeech", $"Ticket Number {e.Item1}, please proceed to {e.Item2} ");
            //Tell Blazor to rewrite the DOM
            StateHasChanged();
        });
    }

    private async void TicketRemovedFromCalled(object sender, string ticketNumber)
    {
        await InvokeAsync(() =>
        {
            int index = calledTicketsList.FindIndex(ct => ct.Item1 == ticketNumber);
            if (index >= 0)
            {
                calledTicketsList.RemoveAt(index);
            }

            //Tell Blazor to rewrite the DOM
            StateHasChanged();
        });
    }

    protected override void OnInitialized()
    {
        //register handlers
        TicketService.TicketCalledFromQueueEvent += TicketCalledFromQueue;

        TicketService.TicketRemovedFromCalledEvent += TicketRemovedFromCalled;
    }
}