@using QueueManagementSystem.MVC.Services
@using System.Speech.Synthesis
@namespace QueueManagementSystem.MVC.Components

@inject ITicketService TicketService


<h1>Called Tickets</h1>

@if (calledTicketsList.Count == 0)
{
    <h4>No called tickets</h4>
}
else
{
    <div class="row">
        <div class="column">
            @foreach (var ticket in calledTicketsList)
            {
                <div class="col-sm-4">
                    <Card Color="CardColor.Danger" Class="mb-4">
                        <CardBody>
                            <CardTitle class="display-4">@ticket.Item1</CardTitle>
                            <CardText class="h3">Proceed to @ticket.Item2</CardText>

                        </CardBody>
                    </Card>
                </div>
            }
        </div>
    </div>
    
}


@code {
    private List<(string, string)> calledTicketsList = new List<(string, string)>();

    private (string?, string?) latestCalledTicket;
    private async void TicketCalledFromQueue(object sender, (string, string) e)
    {
        await InvokeAsync(() =>
        {   
            
            calledTicketsList.Add(e);
            latestCalledTicket = e;
            SpeechSynthesizer synth = new SpeechSynthesizer();
            synth.SetOutputToDefaultAudioDevice();
            var prompt = synth.SpeakAsync($"Ticket Number {e.Item1}, please proceed to {e.Item2} ");

            //Tell Blazor to rewrite the DOM
            StateHasChanged();
        });
    }

    private async void TicketRemovedFromCalled(object sender, string ticketNumber)
    {
        await InvokeAsync(() =>
        {
            int index = calledTicketsList.FindIndex(ct => ct.Item1 == ticketNumber);
            if (index >= 0)
            {
                calledTicketsList.RemoveAt(index);
            }

            if (latestCalledTicket.Item1 == ticketNumber)
            {
                latestCalledTicket = (null, null);
            }

            //Tell Blazor to rewrite the DOM
            StateHasChanged();
        });
    }

    protected override void OnInitialized()
    {
        TicketService.TicketCalledFromQueueEvent += TicketCalledFromQueue;

        TicketService.TicketRemovedFromCalledEvent += TicketRemovedFromCalled;
    }

    
}